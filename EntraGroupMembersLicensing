# Entra ID Group Members License Report Script
# This script retrieves all members from a specified Entra ID group and checks their license assignments

# Import required modules
Import-Module Microsoft.Graph.Authentication
Import-Module Microsoft.Graph.Groups
Import-Module Microsoft.Graph.Users

# Connect to Microsoft Graph (requires appropriate permissions)
Write-Host "Connecting to Microsoft Graph..." -ForegroundColor Green
Connect-MgGraph -Scopes "User.Read.All", "Group.Read.All", "Directory.Read.All"

# Prompt for Group ID or Group Display Name
$groupIdentifier = Read-Host "Enter the Group Display Name or Group Object ID"

try {
    # Try to get the group by display name first, then by object ID if that fails
    Write-Host "Searching for group..." -ForegroundColor Yellow
    
    $group = $null
    try {
        # First try by display name
        $groups = Get-MgGroup -Filter "displayName eq '$groupIdentifier'"
        if ($groups.Count -eq 1) {
            $group = $groups[0]
        } elseif ($groups.Count -gt 1) {
            Write-Warning "Multiple groups found with that display name. Please use Object ID instead."
            $groups | Select-Object DisplayName, Id | Format-Table
            return
        }
    } catch {
        # If display name search fails, try by object ID
        try {
            $group = Get-MgGroup -GroupId $groupIdentifier
        } catch {
            Write-Error "Group not found with identifier: $groupIdentifier"
            return
        }
    }
    
    if (-not $group) {
        # Try by object ID if display name didn't work
        try {
            $group = Get-MgGroup -GroupId $groupIdentifier
        } catch {
            Write-Error "Group not found with identifier: $groupIdentifier"
            return
        }
    }

    Write-Host "Found group: $($group.DisplayName) (ID: $($group.Id))" -ForegroundColor Green

    # Get all group members
    Write-Host "Retrieving group members..." -ForegroundColor Yellow
    $groupMembers = Get-MgGroupMember -GroupId $group.Id -All

    # Filter for users only (exclude other object types like groups, service principals)
    $userMembers = $groupMembers | Where-Object { $_.AdditionalProperties.'@odata.type' -eq '#microsoft.graph.user' }

    Write-Host "Found $($userMembers.Count) user members in the group" -ForegroundColor Green

    # Initialize results array
    $results = @()

    # Process each user member
    $counter = 0
    foreach ($member in $userMembers) {
        $counter++
        Write-Progress -Activity "Processing Users" -Status "Processing user $counter of $($userMembers.Count)" -PercentComplete (($counter / $userMembers.Count) * 100)
        
        try {
            # Get detailed user information
            $user = Get-MgUser -UserId $member.Id -Property "DisplayName,UserPrincipalName,Mail,Department"
            
            # Get user's license assignments
            $userLicenses = Get-MgUserLicenseDetail -UserId $member.Id
            
            # Create license string (combine all license names)
            $licenseNames = @()
            foreach ($license in $userLicenses) {
                $licenseNames += $license.SkuPartNumber
            }
            $licensesString = $licenseNames -join "; "
            
            # If no licenses, show "No licenses assigned"
            if ([string]::IsNullOrEmpty($licensesString)) {
                $licensesString = "No licenses assigned"
            }

            # Create result object
            $userResult = [PSCustomObject]@{
                DisplayName = $user.DisplayName
                UserPrincipalName = $user.UserPrincipalName
                Email = $user.Mail
                Department = $user.Department
                LicensesAssigned = $licensesString
                GroupName = $group.DisplayName
                GroupId = $group.Id
            }

            $results += $userResult

        } catch {
            Write-Warning "Failed to process user $($member.Id): $($_.Exception.Message)"
            
            # Add user with error information
            $errorResult = [PSCustomObject]@{
                DisplayName = "ERROR: Unable to retrieve"
                UserPrincipalName = $member.Id
                Email = "ERROR"
                Department = "ERROR"
                LicensesAssigned = "ERROR: $($_.Exception.Message)"
                GroupName = $group.DisplayName
                GroupId = $group.Id
            }
            $results += $errorResult
        }
    }

    # Generate output file name with timestamp
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $outputFile = "GroupMembersLicenseReport_$($group.DisplayName -replace '[^a-zA-Z0-9]', '_')_$timestamp.csv"

    # Export to CSV
    Write-Host "Exporting results to CSV..." -ForegroundColor Yellow
    $results | Export-Csv -Path $outputFile -NoTypeInformation -Encoding UTF8

    # Display summary
    Write-Host "`nReport completed successfully!" -ForegroundColor Green
    Write-Host "Group: $($group.DisplayName)" -ForegroundColor Cyan
    Write-Host "Total users processed: $($results.Count)" -ForegroundColor Cyan
    Write-Host "Output file: $outputFile" -ForegroundColor Cyan
    Write-Host "File location: $(Get-Location)\$outputFile" -ForegroundColor Cyan

    # Show first few results as preview
    Write-Host "`nPreview of results:" -ForegroundColor Yellow
    $results | Select-Object DisplayName, UserPrincipalName, Email, LicensesAssigned | Format-Table -AutoSize

} catch {
    Write-Error "An error occurred: $($_.Exception.Message)"
} finally {
    # Disconnect from Microsoft Graph
    Write-Host "`nDisconnecting from Microsoft Graph..." -ForegroundColor Yellow
    Disconnect-MgGraph
}

Write-Host "`nScript execution completed." -ForegroundColor Green
